//
//  DashboardViewController.swift
//  OlympIt
//
//  Created Nariman on 18.02.2024.
//  Copyright © 2024 ___ORGANIZATIONNAME___. All rights reserved.
//
//  Template generated by Dastan Makhutov @mchutov
//

import UIKit
import SnapKit
import BetterSegmentedControl

final class DashboardViewController: UIViewController,
                                     DashboardViewProtocol {
    
    enum Constants {
        static let subtitleText = "Что будем учить сегодня?"
        static let welcome = "Добро пожаловать!"
        static let materials = "Материалы"
        static let news = "Новости"
        static let tg = "https://t.me/olymp_it"
    }

	var presenter: DashboardPresenterProtocol?
    
//    private let titleLabel: UILabel = {
//        let label = UILabel()
//        label.font = .systemFont(ofSize: 28, weight: .bold)
//        label.text = Constants.welcome
//        label.textColor = .white
//        return label
//    }()
    
    private lazy var showMore: UIButton = {
        let button = UIButton()
        button.setTitle("Показать больше", for: .normal)
        button.titleLabel?.font = UIFont.systemFont(ofSize: 15, weight: .semibold)
        button.setTitleColor(._727274, for: .normal)
        button.backgroundColor = .clear
        button.addTarget(self, action: #selector(showMoreButtonTapped), for: .touchUpInside)
        return button
    }()
    
    private lazy var connectButton: UIButton = {
          let button = UIButton()
          button.setTitle("Связаться с нами", for: .normal)
          button.setTitleColor(.white, for: .normal)
          button.backgroundColor = .lightGray
          button.layer.cornerRadius = 8
          button.addTarget(self, action: #selector(connectButtonTapped), for: .touchUpInside)
          return button
      }()
    
    private let segmentedControl = BetterSegmentedControl(
        frame: .zero,
        segments: LabelSegment.segments(
            withTitles: InitialLessonType.allCases.map { $0.dashboardTitle },
            normalFont: .systemFont(ofSize: 18, weight: .semibold),
            normalTextColor: ._727274,
            selectedFont: .systemFont(ofSize: 18, weight: .semibold),
            selectedTextColor: .white
        ),
        options:[.backgroundColor(._1E1E1E),
                 .indicatorViewBackgroundColor(._404043),
        .cornerRadius(12.0),
        .animationSpringDamping(1.5)]
    )
    
    private let lessonsTitleLabel: UILabel = {
       let label = UILabel()
        label.text = Constants.materials
        label.textColor = .white
        label.font = .systemFont(ofSize: 24, weight: .semibold)
        return label
    }()
    
    private lazy var collectionView: UICollectionView = {
        let layout = UICollectionViewFlowLayout()
        layout.scrollDirection = .horizontal
        layout.itemSize = .init(width: 120, height: 120)
        
        let collectionView = UICollectionView(frame: .zero, collectionViewLayout: layout)
        collectionView.backgroundColor = ._37343B
        collectionView.dataSource = self
        collectionView.delegate = self
        collectionView.showsHorizontalScrollIndicator = false
        collectionView.contentInset = UIEdgeInsets(top: 10, left: 15, bottom: 10, right: 10)
        collectionView.register(LessonCollectionViewCell.self)
        return collectionView
    }()
    
    private let newsTitleLabel: UILabel = {
        let label = UILabel()
         label.text = Constants.news
         label.textColor = .white
         label.font = .systemFont(ofSize: 24, weight: .semibold)
         return label
     }()
    
    private lazy var newsTableView: UITableView = {
        let tableView = UITableView()
        tableView.delegate = self
        tableView.dataSource = self
        tableView.isScrollEnabled = false
        tableView.register(InitialNewsTableViewCell.self)
        tableView.layer.cornerRadius = 12
        tableView.alwaysBounceVertical = false
        tableView.backgroundColor = ._252527
        return tableView
    }()

	override func viewDidLoad() {
        super.viewDidLoad()
        setupUI()
        presenter?.viewDidLoad()
        setupNavigationBar()
    }
    
    override func viewWillAppear(_ animated: Bool) {
        super.viewWillAppear(animated)
    }

    func reloadCollectionView() {
        hideLoadingAnimation()
        collectionView.reloadData()
    }
    
    func reloadTableView() {
        hideLoadingAnimation()
        newsTableView.reloadData()
    }
    
    func showAlert(message: String) {
        self.alert(message: message)
    }
}

// MARK: Setup UI
private extension DashboardViewController {
    
    func setupNavigationBar() {
        setLeftAlignedNavigationItemTitle(
            text: Constants.welcome,
            color: .white
        )
        navBar(title: Constants.materials)
    }
    
    func setupUI() {
        view.backgroundColor = ._37343B
        view.addSubviews(
            segmentedControl,
            lessonsTitleLabel,
            collectionView,
            newsTitleLabel,
            newsTableView,
            showMore,
            connectButton
        )
    
        segmentedControl.addTarget(
            self,
            action: #selector(
                DashboardViewController.navigationSegmentedControlValueChanged
            ),
            for: .valueChanged
        )
        segmentedControl.snp.makeConstraints { make in
            make.top.equalTo(view.safeAreaLayoutGuide.snp.top).offset(18)
            make.leading.trailing.equalToSuperview().inset(32)
            make.height.equalTo(50)
        }
        
        lessonsTitleLabel.snp.makeConstraints { make in
            make.top.equalTo(segmentedControl.snp.bottom).offset(18)
            make.leading.equalTo(16)
        }
        
        collectionView.snp.makeConstraints { make in
            make.top.equalTo(lessonsTitleLabel.snp.bottom).offset(13)
            make.leading.trailing.equalToSuperview()
            make.height.equalTo(120)
        }
        
        newsTitleLabel.snp.makeConstraints { make in
            make.top.equalTo(collectionView.snp.bottom).offset(20)
            make.leading.equalTo(lessonsTitleLabel.snp.leading)
        }
        
        newsTableView.snp.makeConstraints { make in
            make.top.equalTo(newsTitleLabel.snp.bottom).offset(13)
            make.leading.trailing.equalToSuperview().inset(32)
            make.height.equalTo(297)
        }
        
        showMore.snp.makeConstraints { make in
            make.centerY.equalTo(newsTitleLabel)
            make.height.equalTo(53)
            make.width.equalTo(130)
            make.trailing.equalToSuperview().inset(16)
        }
        
        connectButton.snp.makeConstraints { make in
            make.width.equalTo(180)
            make.centerX.equalToSuperview()
            make.height.equalTo(32)
            make.bottom.equalToSuperview().inset(16)
        }
    }
    
}

// MARK: - Segmented Control processing
private extension DashboardViewController {
    func configureData() {}
    
    @objc func navigationSegmentedControlValueChanged(_ sender: BetterSegmentedControl) {
        if sender.index == 0 {
            presenter?.lessonType = .olymp
        } else {
            presenter?.lessonType = .exam
        }
    }
    
    @objc func connectButtonTapped() {
        guard let url = URL(string: Constants.tg) else { return }
        UIApplication.shared.open(url, options: [:], completionHandler: nil)
    }
    
    @objc func showMoreButtonTapped() {
        presenter?.didTappedShowMore()
    }
}

// MARK: - UICollectionView
extension DashboardViewController: UICollectionViewDataSource,
                                   UICollectionViewDelegate {
    
    func collectionView(_ collectionView: UICollectionView, numberOfItemsInSection section: Int) -> Int {
        presenter?.lessons.count ?? 0
    }
    
    func collectionView(_ collectionView: UICollectionView, cellForItemAt indexPath: IndexPath) -> UICollectionViewCell {
        guard let presenter else { return UICollectionViewCell() }
        let cell: LessonCollectionViewCell = collectionView.dequeueReusableCell(forIndexPath: indexPath)
        cell.configure(lessonModel: presenter.lessons[indexPath.row])
        return cell
    }
    
    func collectionView(_ collectionView: UICollectionView, didSelectItemAt indexPath: IndexPath) {
        presenter?.didSelectItem(at: indexPath.row)
    }
}

// MARK: - UITableView
extension DashboardViewController: UITableViewDataSource,
                                   UITableViewDelegate {
    func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
        guard let presenter else { return 0 }
        if presenter.news.count >= 3 {
            return 3
        } else {
            return presenter.news.count
        }
    }
    
    func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
        let cell: InitialNewsTableViewCell = tableView.dequeueReusableCell(forIndexPath: indexPath)
        cell.configure(news: presenter!.news[indexPath.row])
        return cell
    }
    
    func tableView(_ tableView: UITableView, didSelectRowAt indexPath: IndexPath) {
        presenter?.didSelectItemNews(at: indexPath.row)
    }
    
    func tableView(_ tableView: UITableView, heightForRowAt indexPath: IndexPath) -> CGFloat {
        return 100
    }
}
