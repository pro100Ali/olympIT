//
//  LessonsListPresenter.swift
//  OlympIt
//
//  Created Nariman on 08.05.2024.
//  Copyright Â© 2024 ___ORGANIZATIONNAME___. All rights reserved.
//
//  Template generated by Dastan Makhutov @mchutov
//

import UIKit

final class LessonsListPresenter: LessonsListPresenterProtocol {
    func changeType(type: LessonType) {
        
        self.type = type
    }
    
    
    weak private var view: LessonsListViewProtocol?
    var interactor: LessonsListInteractorProtocol?
    private let router: LessonsListWireframeProtocol
    private let lessonId: String
    internal var type: LessonType
    private let initialLessonType: InitialLessonType
    var initialLessons: LessonsListOutput = []
    var lessons: LessonsListOutput = [] {
        didSet {
            view?.reload()
        }
    }

    init(interface: LessonsListViewProtocol, interactor: LessonsListInteractorProtocol?, router: LessonsListWireframeProtocol, initialLessonType: InitialLessonType, type: LessonType, lessonId: String) {
        self.view = interface
        self.interactor = interactor
        self.router = router
        self.lessonId = lessonId
        self.type = type
        self.initialLessonType = initialLessonType
    }
    
    func viewDidLoad() {
        interactor?.fetchLessonsList(initialLessonType: initialLessonType, type: type, id: lessonId)
    }
    
    func didFetchLessons(response: LessonsListOutput) {
        lessons = response
        initialLessons = lessons
    }
    
    func didSelect(at index: Int) {
        if initialLessonType == .olymp && type == .practice {
            router.openList(lessonId: lessonId, olympId: lessons[index].documentId)
        } else {
            router.openPdf(with: lessons[index].pdf)
        }
    }
    
    func search(searchText: String) {
        if searchText.isEmpty {
            lessons = initialLessons
        } else {
            let filteredLessons = initialLessons.filter { lesson in
                return lesson.name.localizedCaseInsensitiveContains(searchText)
            }
            lessons = filteredLessons
        }
    }
}
